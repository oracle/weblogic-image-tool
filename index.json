[
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/create-image/",
	"title": "Create Image",
	"tags": [],
	"description": "The create command creates a new container image and installs the requested Java and WebLogic software.",
	"content": "The create command helps build a WebLogic container image from a given base OS image. There are a number of optional parameters for this feature. The required option for the command is marked in the following table.\nNOTE: The WebLogic Image Tool does not support a Stack Patch Bundle (SPB; see Doc ID 2764636.1), because an SPB is not a patch but a mechanism for applying all PSU and recommended CPU and SPU patches to a WebLogic Server installation, similar to invoking the Image Tool create command with the --recommendedPatches option.\nUsage: imagetool create [OPTIONS] Parameter Definition Default --tag (Required) Tag for the final build image. Example: store/oracle/weblogic:14.1.2.0.0 --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information. --additionalBuildFiles Additional files that are required by your additionalBuildCommands. A comma separated list of files that should be copied to the build context. See Additional information. --builder, -b Executable to process the Dockerfile. Use the full path of the executable if not on your path. Defaults to docker, or, when set, to the value in environment variable WLSIMG_BUILDER. --buildNetwork Networking mode for the RUN instructions during the image build. See --network for Docker build. --chown userid:groupid to be used for creating files within the image, such as the JDK, the FMW/WLS installs, etc. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle --docker (DEPRECATED) Path to the Docker executable. Use --builder instead. docker --dryRun Skip Docker build execution and print the Dockerfile to stdout. --fromImage Container image to use as a base image when creating a new image. ghcr.io/oracle/oraclelinux:8-slim --fromImageProperties Properties that describe the --fromImage. If not provided, docker run will be used to inspect the --fromImage image. See Custom Base Images --httpProxyUrl Proxy for the HTTP protocol. Example: http://myproxy:80 or http:user:passwd@myproxy:8080 --httpsProxyUrl Proxy for the HTTPS protocol. Example: https://myproxy:80 or https:user:passwd@myproxy:8080 --installerResponseFile One or more custom response files. A comma separated list of paths to installer response files. Overrides the default responses for the Oracle silent installer. --inventoryPointerFile Path to custom inventory pointer file. --inventoryPointerInstallLoc Target location for the inventory pointer file. --jdkVersion Version of the server JDK to install. 8u202 --latestPSU Find and apply the latest PatchSet Update. --opatchBugNumber The patch number for OPatch (patching OPatch). 28186730 --packageManager Override the default package manager for the base image\u0026rsquo;s operating system. Supported values: APK, APTGET, NONE, OS_DEFAULT, YUM, ZYPPER OS_DEFAULT --password Request password for the Oracle Support --user on STDIN, see --user. --passwordEnv Environment variable containing the Oracle Support password, see --user. --passwordFile Path to a file containing just the Oracle Support password, see --user. --patches Comma separated list of patch IDs. Example: 12345678,87654321 --platform Set the target platform to build. Supported values: linux/amd64 or linux/arm64. --pull Always attempt to pull a newer version of base images during the build. --recommendedPatches Find and apply the latest PatchSet Update and recommended patches. This takes precedence over --latestPSU. --resourceTemplates One or more files containing placeholders that need to be resolved by the Image Tool. See Resource Template Files. --skipcleanup Do not delete the build context folder, intermediate images, and failed build containers. For debugging purposes. --strictPatchOrdering Instruct OPatch to apply patches one at a time (uses apply instead of napply). --target Select the target environment in which the created image will be used. Supported values: Default (Docker/Kubernetes), OpenShift. See Additional information. Default --type Installer type. Supported values: WLS, WLSDEV, WLSSLIM, FMW, IDM, MFT, OAM, ODI, OHS, OIG, OUD, OUD_WLS, OID, OSB, SOA, SOA_OSB, SOA_OSB_B2B, WCC, WCP, WCS WLS --useBuildx Use BuildKit for building the container image. --user Oracle support email ID. When supplying user, you must supply the password either as an environment variable using --passwordEnv, or as a file using --passwordFile, or interactively, on the command line with --password. --version Installer version. 14.1.2.0.0 --wdtArchive A WDT archive ZIP file or comma-separated list of files. --wdtDomainHome Path to the -domain_home for WDT. /u01/domains/base_domain --wdtDomainType WDT domain type. Supported values: WLS, JRF, RestrictedJRF WLS --wdtEncryptionKey Passphrase for WDT -use_encryption that will be requested on STDIN. --wdtEncryptionKeyEnv Passphrase for WDT -use_encryption that is provided as an environment variable. --wdtEncryptionKeyFile Passphrase for WDT -use_encryption that is provided as a file. --wdtHome The target folder in the image for the WDT install and models. /u01/wdt --wdtJavaOptions Java command-line options for WDT. --wdtModel A WDT model file or a comma-separated list of files. --wdtModelHome The target location in the image to copy WDT model, variable, and archive files. {wdtHome}/models --wdtModelOnly Install WDT and copy the models to the image, but do not create the domain. false --wdtRunRCU Instruct WDT to run RCU when creating the domain. --wdtStrictValidation Use strict validation for the WDT validation method. Only applies when using model only. false --wdtVariables A WDT variables file or comma-separated list of files. --wdtVersion WDT version to use. latest Additional information --additionalBuildCommands This is an advanced option that let\u0026rsquo;s you provide additional commands to the Docker build step.\nThe input for this parameter is a simple text file that contains one or more of the valid sections. Valid sections for create are:\nSection Available Variables Build Stage Timing initial-build-commands None All As root, and before any Image Tool actions. package-manager-packages None All A list of OS packages, such as ftp gzip, separated by line or space. before-jdk-install JAVA_HOME Intermediate (JDK_BUILD) Before the JDK is installed. after-jdk-install JAVA_HOME Intermediate (JDK_BUILD) After the JDK is installed. before-fmw-install JAVA_HOME ORACLE_HOME Intermediate (WLS_BUILD) Before the Oracle Home is created. after-fmw-install JAVA_HOME ORACLE_HOME Intermediate (WLS_BUILD) After all of the Oracle middleware installers are finished. before-wdt-command DOMAIN_HOME Intermediate (WDT_BUILD) Before WDT is installed. after-wdt-command DOMAIN_HOME Intermediate (WDT_BUILD) After WDT domain creation/update is complete. final-build-commands JAVA_HOME ORACLE_HOME DOMAIN_HOME Final image After all Image Tool actions are complete, and just before the container image is finalized. DOMAIN_HOME is only available if WDT was used during the build. NOTE: Changes made in intermediate stages may not be carried forward to the final image unless copied manually.\nThe Image Tool will copy the Java Home, Oracle Home, domain home, and WDT home directories to the final image.\nChanges fully contained within these directories do not need an additional COPY command in the final-build-commands section.\nEach section can contain one or more valid Dockerfile commands and would look like the following:\n[after-fmw-install] RUN rm /some/dir/unnecessary-file COPY --chown=oracle:oracle files/my_additional_file.txt /u01 [final-build-commands] LABEL owner=\u0026#34;middleware team\u0026#34; --additionalBuildFiles This option provides a way to supply additional files to the image build command. All provided files and directories are copied directly under the files subfolder of the build context.\nTo get those files into the image, additional build commands must be provided using the additionalBuildCommands options. Access to these files using a build command, such as COPY or ADD, should use the original filename with the folder prefix, files/. For example, if the original file was provided as --additionalBuildFiles /scratch/test1/convenience.sh, the Docker build command COPY provided in --additionalBuildCommands should look like COPY --chown=oracle:oracle files/convenience.sh /my/internal/image/location.\nBecause Image Tool uses multi-stage builds, it is important to place the build command (like COPY) in the appropriate section of the Dockerfile based on when the build needs access to the file. For example, if the file is needed in the final image and not for installation or domain creation steps, use the final-build-commands section so that the COPY command occurs in the final stage of the image build. Or, if the file needs to change the Oracle Home prior to domain creation, use the after-fmw-install or before-wdt-command sections.\nUsing OpenShift --target By default, the installed middleware will default file permissions to rwxr-x---.\nThe target option allows you to toggle the defaults so that the generated domain is easier to use in the target environment. For example, the --target OpenShift option will change the file permissions in the domain directory so that the group permissions match the user permissions.\nTarget Default File Permissions Default File Ownership Default rwxr-x--- oracle:oracle OpenShift rwxrwx--- oracle:root Custom Base Images --fromImageProperties When specifying --fromImage to override the default base image, Image Tool needs additional information about the image that is being provided, such as the installed operating system and version. By default, the additional information is gathered automatically by the Image Tool using docker run. If it is desirable to provide that additional information manually and avoid the docker run step, --fromImageProperties must be provided with the additional information using a Java Properties file. The file must be a line-oriented format with key-value pairs separated by =. For example:\npackageManager=MICRODNF __OS__ID=\u0026#34;ol\u0026#34; __OS__VERSION=\u0026#34;8.10\u0026#34; Required properties:\nKey Description Default packageManager The name of the installed package manager in the fromImage in all CAPS. Like DNF, MICRODNF, and YUM YUM __OS__ID The ID value found in /etc/os-release. Like \u0026ldquo;ol\u0026rdquo; for Oracle Linux, or \u0026ldquo;bb\u0026rdquo; for BusyBox. __OS__VERSION The VERSION value found in /etc/os-release. Like \u0026ldquo;8.10\u0026rdquo;. Additional properties:\nKey Description javaHome The location where the JDK is pre-installed. Like \u0026ldquo;/u01/jdk\u0026rdquo;. __OS__arch The output of uname -m. Like amd64 or arm64. Resource Template Files If provided, the file or files provided with --resourceTemplates will be overwritten. For known tokens, the placeholders will be replaced with values according to the following table.\nNote: Placeholders must follow the Mustache syntax, like {{imageName}} or {{{imageName}}}.\nToken Name Value Description domainHome The value provided to the Image Tool with --wdtDomainHome. domainHomeSourceType PersistentVolume (default), FromModel if --wdtModelOnly, or Image if the domain is created in the image with WDT. imageName The value provided to the Image Tool with --tag. modelHome The value provided to the Image Tool with --wdtModelHome. Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\ncreate --type wls --version 14.1.2.0.0 --tag wls:141200 --user acmeuser@mycompany.com --httpProxyUrl http://mycompany-proxy:80 --httpsProxyUrl http://mycompany-proxy:80 --passwordEnv MYPWD Use it on the command line, as follows:\n$ imagetool @/path/to/build_args Usage scenarios The following commands assume that all the required JDK, WLS, or FMW (WebLogic infrastructure) installers have been downloaded to the cache directory. Use the cache command to set it up.\nCreate an image named sample:wls with the WebLogic installer 14.1.2.0.0, server JDK 21.0.6, and latest PSU applied.\n$ imagetool create --tag sample:wls --latestPSU --user testuser@xyz.com --password hello Create an image named sample:wdt with the same options as above and create a domain with WebLogic Deploy Tooling.\n$ imagetool create --tag sample:wdt --latestPSU --user testuser@xyz.com --password hello --wdtModel /path/to/model.json --wdtVariables /path/to/variables.json --wdtVersion 0.16 If wdtVersion is not provided, the tool uses the latest release.\nCreate an image named sample:patch with the selected patches applied.\n$ imagetool create --tag sample:patch --user testuser@xyz.com --password hello --patches 12345678,p87654321 The patch numbers may or may not start with \u0026lsquo;p\u0026rsquo;.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/developer/source/",
	"title": "Build from source",
	"tags": [],
	"description": "",
	"content": "The Image Tool installer is available for download on the Releases page. If you want to build the installer from source instead of downloading it, follow these instructions:\nDownload and install JDK 8u261+. Download and install Maven 3.6.3+. Clone this repository to your local environment. Cloning options are shown under the Code button at the root of this project. For example, git clone https://github.com/oracle/weblogic-image-tool.git. From inside the top-level directory of the cloned project, weblogic-image-tool, using Maven, execute one or more of these phases: validate - Validate the project is correct and all necessary information is available. compile - Compile the source code. test - Test the compiled source code using the JUnit5 framework. package - Create the installer ZIP file, imagetool.zip. verify - Run integration tests using the JUnit5 framework (Prerequisite: Docker installed). clean - Restore the source by removing any items created by package or another phase of the build. Note: Maven executes build phases sequentially, validate, compile, test, package, verify, such that running verify will run all of these phases from validate through package before running verify.\nBecause the package phase comes before the verify phase, it is not necessary to run the integration tests to create the Image Tool installer. If you are making changes and want to validate those changes in your environment, you will need to do some additional setup before running the verify phase because several of the integration tests require access to the Oracle Technology Network. To run the integration tests in the verify phase, you must specify three environment variables, ORACLE_SUPPORT_USERNAME, ORACLE_SUPPORT_PASSWORD, and STAGING_DIR. The first two, Oracle Support user name and password, are used to connect to Oracle OTN for patches. The third, STAGING_DIR, should be a local folder where WebLogic Server installers, JDK installers, and pre-downloaded patches can be found. The files required in the STAGING_DIR depend on which tests that you want to run.\nExample: Run a set of integration tests (available groups are cache, gate, and nightly:\n$ mvn verify -Dtest.groups=cache Example: Run a single integration test:\n$ mvn verify -Dtest.groups=gate,nightly -Dit.test=ITImagetool#createWlsImg Integration Test groups:\ncache - Tests that build and manipulate the Image Tool cache. gate - A basic set of integration tests that are used to validate merge requests, including building several Docker image (~20 minutes). nightly - The full set of integration tests building various container images including JRF and WLS installations (~2 hours). Note: In order to run an integration test that builds an image like createWlsImg, you must run the cache group first to populate the cache with the WLS and JDK installers.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/samples/create-image-with-internet/",
	"title": "Create an image with full Internet access",
	"tags": [],
	"description": "",
	"content": "The Image Tool supports creating Linux based WebLogic container images, applying WebLogic patches, and creating WebLogic domains. It can be used with or without Internet access.\nIn this use case, the Image Tool will:\nStart with a base-level operating system image (ghcr.io/oracle/oraclelinux:8-slim). Update the image with the necessary packages for installing WebLogic Server. Install Java and WebLogic Server. Steps Download these Java and WebLogic installers from the Oracle Software Delivery Cloud and save them in a directory of your choice, for example, /home/acmeuser/wls-installers:\nfmw_12.2.1.3.0_wls_Disk1_1of1.zip\njdk-8u202-linux-x64.tar.gz\nUse the Cache Tool to add the installers:\n$ imagetool cache addInstaller --type jdk --version 8u202 --path /home/acmeuser/wls-installers/jdk-8u202-linux-x64.tar.gz $ imagetool cache addInstaller --type wls --version 12.2.1.3.0 --path /home/acmeuser/wls-installers/fmw_12.2.1.3.0_wls_Disk1_1of1.zip Note: The value of the version must be a valid WebLogic Server version number. This version number is used to verify and find the correct patch file to download from Oracle Support. The format of the version is a 5 digits tuple, separated by period. For example, 12.2.1.3.0 12.1.3.0.0\nCreate the image using the Create Tool commands. For example:\n$ imagetool create --tag wls:12.2.1.3.0 --latestPSU --version 12.2.1.3.0 --user username@mycompany.com --passwordEnv MYPWD Where --user --passwordEnv provides the credentials for a user who is entitled to download patches from Oracle Support.\nNOTE: You can provide the password in one of three ways:\nRead from STDIN --password Environment variable --passwordEnv File containing the password --passwordFile You will see the Docker command output as the tool runs:\n[2019-05-28 10:37:02] [com.oracle.weblogic.imagetool.cli.menu.CreateImage] [INFO ] tmp directory used for build context: /home/acmeuser/wlsimgbuilder_temp8791654163579491583 [2019-05-28 10:37:09] [com.oracle.weblogic.imagetool.cli.menu.CreateImage] [INFO ] Starting build: docker build --force-rm --rm=true --no-cache --tag wls:12.2.1.3.0 --build-arg http_proxy=http://company-proxy.com:80 --build-arg https_proxy=http://company-proxy.com:80 --build-arg WLS_PKG=fmw_12.2.1.3.0_wls_Disk1_1of1.zip --build-arg JAVA_PKG=jdk-8u201-linux-x64.tar.gz --build-arg PATCHDIR=patches /home/acmeuser/wlsimgbuilder_temp8791654163579491583 Sending build context to Docker daemon 1.08GB Step 1/46 : ARG BASE_IMAGE=ghcr.io/oracle/oraclelinux:7-slim ... Removing intermediate container 57ccb9fff56b ---\u0026gt; 18d366fc3da4 Successfully built 18d366fc3da4 Successfully tagged wls:12.2.1.3.0 To verify that the image was created, use the docker images command: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE wls 12.2.1.3.0 18d366fc3da4 About a minute ago 1.41GB ghcr.io/oracle/oraclelinux 7-slim f7512ac13c1b 6 weeks ago 118MB "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": " A container image client on the build machine, such as Docker or Podman. For Docker, a minimum version of 18.03.1.ce is required. For Podman, a minimum version of 3.0.1 is required. An installed version of Java to run Image Tool, version 8+. Installers for Oracle WebLogic Server and Oracle JDK from the Oracle Software Delivery Cloud for installation into the new image. When using the imagetool alias from setup.sh instead of the shell script (imagetool.sh), Bash version 4.0 or later is required for \u0026lt;tab\u0026gt; command completion. When using any of the patching options, --patches, --recommendedPatches, or --latestPSU, you will need to provide Oracle Support credentials. The WebLogic Image Tool does not support a Stack Patch Bundle (SPB; see Doc ID 2764636.1), because an SPB is not a patch but a mechanism for applying all PSU and recommended CPU and SPU patches to a WebLogic Server installation, similar to invoking the Image Tool create or update command with the --recommendedPatches option.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/quickstart/",
	"title": "Quick Start",
	"tags": [],
	"description": "",
	"content": "Quick Start Guide Use this Quick Start guide to create a Linux based WebLogic container image.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/developer/contribute/",
	"title": "Contribute to WIT",
	"tags": [],
	"description": "",
	"content": "Oracle welcomes contributions to this repository from anyone.\nIf you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.\nIf you have any questions about a possible submission, feel free to open an issue too.\nContributing to the WebLogic Image Tool repository Pull requests can be made under The Oracle Contributor Agreement (OCA).\nFor pull requests to be accepted, the bottom of your commit message must have the following line using your name and e-mail address as it appears in the OCA Signatories list.\nSigned-off-by: Your Name \u0026lt;you@example.org\u0026gt; This can be automatically added to pull requests by committing with:\n$ git commit --signoff Only pull requests from committers that can be verified as having signed the OCA can be accepted.\nPull request process Fork this repository.\nCreate a branch in your fork to implement the changes. We recommend using the issue number as part of your branch name, for example, 1234-fixes.\nEnsure that any documentation is updated with the changes that are required by your fix.\nEnsure that any samples are updated if the base image has been changed.\nSquash your branch changes into a single commit.\nSubmit the pull request.\na. Do not leave the pull request blank.\nb. Explain exactly what your changes are meant to do and provide simple steps on how to validate your changes.\nc. Ensure that you reference the issue you created as well.\nWe will assign the pull request to 2-3 people for review before it is merged.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/samples/create-image-no-internet/",
	"title": "Create an image without Internet access",
	"tags": [],
	"description": "",
	"content": "In this use case, because there is no Internet access, you will need to download all the installers and patches, plus set up the cache. Also, you must provide a base operating system image that has the following packages installed:\ngzip tar unzip Steps Download these Java and WebLogic installers from the Oracle Software Delivery Cloud and save them in a directory of your choice, for example, /home/acmeuser/wls-installers:\nfmw_12.2.1.3.0_wls_Disk1_1of1.zip\njdk-8u202-linux-x64.tar.gz\nUse the Cache Tool to add the installers:\n$ imagetool cache addInstaller --type jdk --version 8u202 --path /home/acmeuser/wls-installers/jdk-8u202-linux-x64.tar.gz $ imagetool cache addInstaller --type wls --version 12.2.1.3.0 --path /home/acmeuser/wls-installers/fmw_12.2.1.3.0_wls_Disk1_1of1.zip For each WebLogic patch, download it from Oracle Support and set up the cache.\nFor example, if you download patch number 27342434 for WebLogic Server version 12.2.1.3.0:\n$ imagetool cache addPatch --patchId 27342434_12.2.1.3.0 --path /home/acmeuser/cache/p27342434_122130_Generic.zip Note: Refer to the Cache commands for the format of patchId.\nThen, run the command to create the image:\n$ imagetool create --fromImage myosimg:latest --tag wls:12.2.1.3.0 --patches 27342434 --version 12.2.1.3.0 Occasionally, a WebLogic Server patch will require patching the OPatch binaries before applying them. We recommend downloading the latest OPatch patch and setting up the cache.\nFor example, if the latest OPatch patch is 28186730, 13.9.4.0.0. After downloading it from Oracle Support, you can use this command to set up the cache:\n$ imagetool cache addPatch --patchId 28186730_13.9.4.0.0 --path /home/acmeuser/cache/p28186730_139400_Generic.zip "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " Download the WIT release ZIP file to a desired location. The latest ZIP file can be found on the project releases page. Alternatively, you can download the ZIP file with cURL. curl -m 120 -fL https://github.com/oracle/weblogic-image-tool/releases/latest/download/imagetool.zip -o ./imagetool.zip Unzip the downloaded ZIP file into a directory of your choice. All of the contents of the ZIP file will be extracted into a single subdirectory named imagetool. OPTIONALLY: You may build the project (mvn clean package) to create the ZIP file installer in ./imagetool/target (see Build From Source). Set the JAVA_HOME environment variable to the location of the Java install (see Prerequisites). "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/create-aux-image/",
	"title": "Create Auxiliary Image",
	"tags": [],
	"description": "The createAuxImage command creates a new container image with WDT install and optional models, archives, and variables files.",
	"content": "The createAuxImage command helps build a container image from a given base OS image. Auxiliary images are very small images providing the WDT install files with WDT models, archives, and variables for WebLogic Kubernetes Operator - Auxiliary Images. These images are an alternative approach for including Model-in-Image model files, application archive files, WebLogic Deploying Tooling installation files, or other types of files, in your WebLogic Server Kubernetes Operator environment.\nThere are a number of optional parameters for this feature. The required option for the command is marked in the following table.\nUsage: imagetool createAuxImage [OPTIONS] Parameter Definition Default --tag (Required) Tag for the final build image. Example: store/oracle/mydomain:1 --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information. --additionalBuildFiles Additional files that are required by your additionalBuildCommands. A comma separated list of files that should be copied to the build context. See Additional information. --builder, -b Executable to process the Dockerfile. Use the full path of the executable if not on your path. Defaults to docker, or, when set, to the value in environment variable WLSIMG_BUILDER. --buildNetwork Networking mode for the RUN instructions during the image build. See --network for Docker build. --chown userid:groupid to be used for creating files within the image, such as the WDT installer, WDT model, and WDT archive. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle --dryRun Skip Docker build execution and print the Dockerfile to stdout. --fromImage Container image to use as a base image when creating a new image. busybox --fromImageProperties Properties that describe the --fromImage. If not provided, docker run will be used to inspect the --fromImage image. See Custom Base Images --httpProxyUrl Proxy for the HTTP protocol. Example: http://myproxy:80 or http:user:passwd@myproxy:8080 --httpsProxyUrl Proxy for the HTTPS protocol. Example: https://myproxy:80 or https:user:passwd@myproxy:8080 --packageManager Override the default package manager for the base image\u0026rsquo;s operating system. Supported values: APK, APTGET, NONE, YUM, ZYPPER --platform Set the target platform to build. Supported values: linux/amd64 or linux/arm64. --pull Always attempt to pull a newer version of base images during the build. --skipcleanup Do not delete the build context folder, intermediate images, and failed build containers. For debugging purposes. --target Select the target environment in which the created image will be used. Supported values: Default (Docker/Kubernetes), OpenShift. See Additional information. Default --wdtArchive A WDT archive ZIP file or comma-separated list of files. --wdtHome The target folder in the image for the WDT install and models. /auxiliary --wdtModel A WDT model file or a comma-separated list of files. --wdtModelHome The target location in the image to copy WDT model, variable, and archive files. {wdtHome}/models --wdtVariables A WDT variables file or comma-separated list of files. --wdtVersion WDT version to be installed in the container image in {wdtHome}/weblogic-deploy. For more details, see Additional information. latest Additional information --additionalBuildCommands This is an advanced option that let\u0026rsquo;s you provide additional commands to the Docker build step.\nThe input for this parameter is a simple text file that contains one or more of the valid sections. Valid sections for createAuxImage are:\nSection Available Variables Build Stage Timing initial-build-commands None All As root, and before any Image Tool actions. package-manager-packages None All A list of OS packages, such as ftp gzip, separated by line or space. final-build-commands AUXILIARY_IMAGE_PATH WDT_HOME WDT_MODEL_HOME Final image After all Image Tool actions are complete, and just before the container image is finalized. Each section can contain one or more valid Dockerfile commands and would look like the following:\n[final-build-commands] LABEL owner=\u0026#34;middleware team\u0026#34; COPY --chown=oracle:oracle files/my_additional_file.txt /auxiliary --additionalBuildFiles This option provides a way to supply additional files to the image build command. All provided files and directories are copied directly under the files subfolder of the build context.\nTo get those files into the image, additional build commands must be provided using the additionalBuildCommands options. Access to these files using a build command, such as COPY or ADD, should use the original filename with the folder prefix, files/. For example, if the original file was provided as --additionalBuildFiles /scratch/test1/convenience.sh, the Docker build command COPY provided in --additionalBuildCommands should look like COPY --chown=oracle:oracle files/convenience.sh /my/internal/image/location.\nBecause Image Tool uses multi-stage builds, it is important to place the build command (like COPY) in the appropriate section of the Dockerfile based on when the build needs access to the file. For example, if the file is needed in the final image and not for installation or domain creation steps, use the final-build-commands section so that the COPY command occurs in the final stage of the image build.\nUsing OpenShift --target The file permissions in the Auxiliary image should match the container image where WebLogic Server is installed. The target option is supplied for Auxiliary images as a convenience to simplify creating images with the same owner:group file permissions. Use the same value for --target when creating images with create and createAuxImage.\nTarget Default File Permissions Default File Ownership Default rwxr-x--- oracle:oracle OpenShift rwxrwx--- oracle:root Custom Base Images --fromImageProperties When specifying --fromImage to override the default base image, Image Tool needs additional information about the image that is being provided, such as the installed operating system and version. By default, the additional information is gathered automatically by the Image Tool using docker run. If it is desirable to provide that additional information manually and avoid the docker run step, --fromImageProperties must be provided with the additional information using a Java Properties file. The file must be a line-oriented format with key-value pairs separated by =. For example:\npackageManager=MICRODNF __OS__ID=\u0026#34;ol\u0026#34; __OS__VERSION=\u0026#34;8.10\u0026#34; Required properties:\nKey Description Default packageManager The name of the installed package manager in the fromImage in all CAPS. Like DNF, MICRODNF, and YUM YUM __OS__ID The ID value found in /etc/os-release. Like \u0026ldquo;ol\u0026rdquo; for Oracle Linux, or \u0026ldquo;bb\u0026rdquo; for BusyBox. __OS__VERSION The VERSION value found in /etc/os-release. Like \u0026ldquo;8.10\u0026rdquo;. Additional properties:\nKey Description javaHome The location where the JDK is pre-installed. Like \u0026ldquo;/u01/jdk\u0026rdquo;. __OS__arch The output of uname -m. Like amd64 or arm64. --wdtVersion As of version 1.11.0, you may opt to install WDT and the model files in separate images. By default, the cached wdt_latest version of WDT is installed in the Auxiliary image with the selected models, archives, and variable files. If you use --wdtVersion=none (case insensitive), the auxiliary image will be created without installing WDT.\nUse an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\ncreateAuxImage --tag mydomain:1 --wdtModel ./my_domain.yaml --wdtArchive ./my_domain.zip Use it on the command line, as follows:\n$ imagetool @/path/to/build_args Usage scenarios The following commands assume that the required WDT installer has been downloaded and added to the ImageTool cache. Use the cache command to set it up.\nCreate an image named wdt:1.10 with the latest WebLogic Deploy Tooling version.\n$ imagetool createAuxImage --tag wdt:1.10 Create an image named mydomain:1 with the same options as above and add a WDT model and archive.\n$ imagetool create --tag mydomain:1 --wdtModel /path/to/my_domain.yaml --wdtArchive /path/to/my_domain.zip "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/",
	"title": "User Guide",
	"tags": [],
	"description": "",
	"content": "User Guide The User Guide provides detailed usage information for the WebLogic Image Tool, including typical use case scenarios.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/rebase-image/",
	"title": "Rebase Image",
	"tags": [],
	"description": "The rebase command creates a new container image using an existing WebLogic domain from an existing image.",
	"content": "The rebase command creates a new container image and copies an existing WebLogic domain to that new image.\nThe new container image can be based on an existing image in the repository or created as part of the rebase operation similar to the create command.\nUsage: imagetool rebase [OPTIONS] Parameter Definition Default --sourceImage (Required) Source Image containing the WebLogic domain. --tag (Required) Tag for the final build image. Example: store/oracle/weblogic:14.1.2.0.0 --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information. --additionalBuildFiles Additional files that are required by your additionalBuildCommands. A comma separated list of files that should be copied to the build context. See Additional information. --builder, -b Executable to process the Dockerfile. Use the full path of the executable if not on your path. Defaults to docker, or, when set, to the value in environment variable WLSIMG_BUILDER. --buildNetwork Networking mode for the RUN instructions during the image build. See --network for Docker build. --chown userid:groupid to be used for creating files within the image, such as the JDK, the FMW/WLS installs, etc. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle --dryRun Skip Docker build execution and print the Dockerfile to stdout. --fromImage Container image to use as a base image when creating a new image. ghcr.io/oracle/oraclelinux:8-slim --httpProxyUrl Proxy for the HTTP protocol. Example: http://myproxy:80 or http:user:passwd@myproxy:8080 --httpsProxyUrl Proxy for the HTTPS protocol. Example: https://myproxy:80 or https:user:passwd@myproxy:8080 --installerResponseFile One or more custom response files. A comma separated list of paths to installer response files. Overrides the default responses for the Oracle silent installer. --inventoryPointerFile Path to custom inventory pointer file. --inventoryPointerInstallLoc Target location for the inventory pointer file. --jdkVersion Version of the server JDK to install. 8u202 --latestPSU Find and apply the latest PatchSet Update. --opatchBugNumber The patch number for OPatch (patching OPatch). 28186730 --packageManager Override the default package manager for the base image\u0026rsquo;s operating system. Supported values: APK, APTGET, NONE, OS_DEFAULT, YUM, ZYPPER OS_DEFAULT --password Request password for the Oracle Support --user on STDIN, see --user. --passwordEnv Environment variable containing the Oracle Support password, see --user. --passwordFile Path to a file containing just the Oracle Support password, see --user. --patches Comma separated list of patch IDs. Example: 12345678,87654321 --platform Set the target platform to build. Supported values: linux/amd64 or linux/arm64. --pull Always attempt to pull a newer version of base images during the build. --recommendedPatches Find and apply the latest PatchSet Update and recommended patches. This takes precedence over --latestPSU. --skipcleanup Do not delete the build context folder, intermediate images, and failed build containers. For debugging purposes. --strictPatchOrdering Instruct OPatch to apply patches one at a time (uses apply instead of napply). --target Select the target environment in which the created image will be used. Supported values: Default (Docker/Kubernetes), OpenShift. See Additional information. Default --targetImage Container image to extend for the domain\u0026rsquo;s new image. --type Installer type. Supported values: WLS, WLSDEV, WLSSLIM, FMW, IDM, MFT, OAM, ODI, OHS, OIG, OUD, OUD_WLS, OID, OSB, SOA, SOA_OSB, SOA_OSB_B2B, WCC, WCP, WCS WLS --useBuildx Use BuildKit for building the container image. --user Your Oracle support email ID. When supplying user, you must supply the password either as an environment variable using --passwordEnv, or as a file using --passwordFile, or interactively, on the command line with --password. --version Installer version. 14.1.2.0.0 Additional information --additionalBuildCommands This is an advanced option that let\u0026rsquo;s you provide additional commands to the Docker build step.\nThe input for this parameter is a simple text file that contains one or more of the valid sections. Valid sections for rebase:\nSection Available Variables Build Stage Timing initial-build-commands None All As root, and before any Image Tool actions. before-jdk-install JAVA_HOME DOMAIN_HOME Intermediate (JDK_BUILD) Before the JDK is installed. after-jdk-install JAVA_HOME DOMAIN_HOME Intermediate (JDK_BUILD) After the JDK is installed. before-fmw-install JAVA_HOME ORACLE_HOME DOMAIN_HOME Intermediate (WLS_BUILD) Before the Oracle Home is created. after-fmw-install JAVA_HOME ORACLE_HOME DOMAIN_HOME Intermediate (WLS_BUILD) After all of the Oracle middleware installers are finished. final-build-commands JAVA_HOME ORACLE_HOME DOMAIN_HOME Final image After all Image Tool actions are complete, and just before the container image is finalized. NOTE: Changes made in intermediate stages may not be carried forward to the final image unless copied manually.\nThe Image Tool will copy the Java Home and the Oracle Home directories to the final image.\nChanges fully contained within these directories do not need an additional COPY command in the final-build-commands section. Each section can contain one or more valid Dockerfile commands and would look like the following:\n[after-fmw-install] RUN rm /some/dir/unnecessary-file COPY --chown=oracle:oracle files/my_additional_file.txt /u01 [final-build-commands] LABEL owner=\u0026#34;middleware team\u0026#34; --additionalBuildFiles This option provides a way to supply additional files to the image build command. All provided files and directories are copied directly under the files subfolder of the build context.\nTo get those files into the image, additional build commands must be provided using the additionalBuildCommands options. Access to these files using a build command, such as COPY or ADD, should use the original filename with the folder prefix, files/. For example, if the original file was provided as --additionalBuildFiles /scratch/test1/convenience.sh, the Docker build command COPY provided in --additionalBuildCommands should look like COPY --chown=oracle:oracle files/convenience.sh /my/internal/image/location.\nBecause Image Tool uses multi-stage builds, it is important to place the build command (like COPY) in the appropriate section of the Dockerfile based on when the build needs access to the file. For example, if the file is needed in the final image and not for installation or domain creation steps, use the final-build-commands section so that the COPY command occurs in the final stage of the image build. Or, if the file needs to change the Oracle Home prior to domain creation, use the after-fmw-install or before-wdt-command sections.\n--target By default, the generated WLS domain in your image will use the best practices defined by Oracle WebLogic Server.\nThe target option allows you to toggle the defaults so that the generated domain is easier to use in the target environment. For example, the --target OpenShift option will change the file permissions in the domain directory so that the group permissions match the user permissions.\nTarget Default File Permissions Default File Ownership Default rwxr-x--- oracle:oracle OpenShift rwxrwx--- oracle:root Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\nrebase --tag wls:141200 --sourceImage wls:141100 --version 14.1.2.0.0 --jdkVersion 21.0.6 Use it on the command line, as follows:\n$ imagetool @/path/to/build_args Usage scenarios Note: Use --passwordEnv or --passwordFile instead of --password.\nThe commands below assume that all the required JDK, WLS, or FMW (WebLogic infrastructure) installers have been downloaded to the cache directory. Use the cache command to set it up.\nUpdate the JDK for an existing domain. Copy the existing domain from sample:v1 where the JDK was 8u401 to a new image called sample:v2 and install the newer JDK 21.0.6 with WebLogic Server 14.1.2.0.0.\n$ imagetool rebase --tag sample:v2 --sourceImage sample:v1 --version 14.1.2.0.0 --jdkVersion 21.0.6 Update the Oracle Home for an existing domain with a newer WebLogic version. Copy a domain from an existing image to a new image with a new install of WebLogic Server 14.1.2.0.0. Copy the domain from sample:v1 and select the desired WebLogic installer using the --version argument.\n$ imagetool rebase --tag sample:v2 --sourceImage sample:v1 --version 14.1.4.0.0 --jdkVersion 21.0.6 Update the JDK and/or Oracle Home for an existing domain using another image with pre-installed binaries. Copy the domain from the source image named sample:v1 to a new image called sample:v2 based on a target image named fmw:1412. Note: The Oracle Home and JDK must be installed in the same folders on each image.\n$ imagetool rebase --tag sample:v2 --sourceImage sample:v1 --targetImage fmw:1412 "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/samples/patching-image/",
	"title": "Patch an existing image",
	"tags": [],
	"description": "",
	"content": "This example shows you how to apply WebLogic Server patches to an existing image. You can download patches using the Image Tool or by manually downloading them.\nSteps Create the image, as directed in the Quick Start guide.\nFor each WebLogic patch, download it from Oracle Support and set up the cache.\nFor example, to download patch number 27342434 for WebLogic Server version 12.2.1.3.0:\n$ imagetool cache addPatch --patchId 27342434_12.2.1.3.0 --path /home/acmeuser/cache/p27342434_122130_Generic.zip Note: Refer to the Cache commands for the format of patchId.\nUse the imagetool update command to update the image:\n$ imagetool update --fromImage wls:12.2.1.3.0 --tag wls:12.2.1.3.4 --patches 27342434 "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/quickstart/quickstart/",
	"title": "Steps",
	"tags": [],
	"description": "",
	"content": "Before you begin Make sure that you have fulfilled the Prerequisites and Setup requirements.\nOverview The high level steps for creating an image are:\nDownload the Java and WebLogic installers from the Oracle Software Delivery Cloud. Add the installers to the cache store. Run the imagetool command to create the image. Do this Download these Java and WebLogic installers from the Oracle Software Delivery Cloud and save them in a directory of your choice, for example, /home/acmeuser/wls-installers:\nfmw_12.2.1.3.0_wls_Disk1_1of1.zip\njdk-8u202-linux-x64.tar.gz\nUse the Cache Tool to add the installers:\n$ imagetool cache addInstaller --type jdk --version 8u202 --path /home/acmeuser/wls-installers/jdk-8u202-linux-x64.tar.gz $ imagetool cache addInstaller --type wls --version 12.2.1.3.0 --path /home/acmeuser/wls-installers/fmw_12.2.1.3.0_wls_Disk1_1of1.zip You can verify the cache entries by:\n$ imagetool cache listItems Cache contents jdk_8u202=/home/acmeuser/wls-installers/jdk-8u202-linux-x64.tar.gz wls_12.2.1.3.0=/home/acmeuser/wls-installers/fmw_12.2.1.3.0_wls_Disk1_1of1.zip Run the imagetool create command:\n$ imagetool create --tag wls:12.2.1.3.0 The final image will have the following structure:\n[oracle@c3fe8ee0167d oracle]$ ls -arlt /u01/ total 20 drwxr-xr-x 7 oracle oracle 4096 May 28 23:40 jdk drwxr-xr-x 11 oracle oracle 4096 May 28 23:40 oracle drwxr-xr-x 5 oracle oracle 4096 May 28 23:40 . drwxr-xr-x 18 root root 4096 May 29 01:31 .. "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/samples/",
	"title": "Samples",
	"tags": [],
	"description": "",
	"content": "Samples "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/",
	"title": "Image Tool",
	"tags": [],
	"description": "",
	"content": " Create Image The create command creates a new container image and installs the requested Java and WebLogic software.\nCreate Auxiliary Image The createAuxImage command creates a new container image with WDT install and optional models, archives, and variables files.\nRebase Image The rebase command creates a new container image using an existing WebLogic domain from an existing image.\nUpdate Image The update command creates a new container image by applying WebLogic patches to an existing image.\nInspect Image The inspect command reports on the contents of a container image.\nCache The Image Tool maintains metadata on the local file system for patches and installers. You can use the cache command to manipulate the local metadata.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/update-image/",
	"title": "Update Image",
	"tags": [],
	"description": "The update command creates a new container image by applying WebLogic patches to an existing image.",
	"content": "After you have created a container image with the Image Tool, you may want to change it from time to time. Use the update command to update the existing container images created with the Image Tool. For example, you may want to:\nApply a WebLogic patch Apply the latest PSU from Oracle Create a new WebLogic domain (if one did not already exist) Deploy a new application to an existing domain Modify the domain configuration (add a data source, change a port number, and such) NOTE: The WebLogic Image Tool does not support a Stack Patch Bundle (SPB; see Doc ID 2764636.1), because an SPB is not a patch but a mechanism for applying all PSU and recommended CPU and SPU patches to a WebLogic Server installation.\nThe required options for the update command are marked.\nUsage: imagetool update [OPTIONS] Update WebLogic Docker image with selected patches Parameter Definition Default --fromImage (Required) Container image to be extended. The provided image MUST contain an Oracle Home with middleware installed. The fromImage option serves as a starting point for the new image to be created. --tag (Required) Tag for the final build image. Example: store/oracle/weblogic:14.1.2.0.0 --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information. --additionalBuildFiles Additional files that are required by your additionalBuildCommands. A comma separated list of files that should be copied to the build context. See Additional information. --builder, -b Executable to process the Dockerfile. Use the full path of the executable if not on your path. Defaults to docker, or, when set, to the value in environment variable WLSIMG_BUILDER. --buildNetwork Networking mode for the RUN instructions during the image build. See --network for Docker build. --chown userid:groupid to be used for creating files and applying middleware patches within the image. The userid and groupid must already exist in the image. Defaults to the user and group of the Oracle Home in the provided image. --dryRun Skip Docker build execution and print the Dockerfile to stdout. --httpProxyUrl Proxy for the HTTP protocol. Example: http://myproxy:80 or http:user:passwd@myproxy:8080 --httpsProxyUrl Proxy for the HTTPS protocol. Example: https://myproxy:80 or https:user:passwd@myproxy:8080 --latestPSU (DEPRECATED) Find and apply the latest PatchSet Update, see Additional information. --opatchBugNumber The patch number for OPatch (patching OPatch). 28186730 --password Request password for the Oracle Support --user on STDIN, see --user. --passwordEnv Environment variable containing the Oracle Support password, see --user. --passwordFile Path to a file containing just the Oracle Support password, see --user. --patches Comma separated list of patch IDs. Example: 12345678,87654321 --platform Set the target platform to build. Supported values: linux/amd64 or linux/arm64. --pull Always attempt to pull a newer version of base images during the build. --recommendedPatches (DEPRECATED) Find and apply the latest PatchSet Update and recommended patches. This takes precedence over --latestPSU. See Additional information. --resourceTemplates One or more files containing placeholders that need to be resolved by the Image Tool. See Resource Template Files. --skipcleanup Do not delete the build context folder, intermediate images, and failed build containers. For debugging purposes. --strictPatchOrdering Instruct OPatch to apply patches one at a time (uses apply instead of napply). --target Select the target environment in which the created image will be used. Supported values: Default (Docker/Kubernetes), OpenShift. See Additional information. Default --type Installer type. Supported values: WLS, WLSDEV, WLSSLIM, FMW, IDM, MFT, OAM, ODI, OHS, OIG, OUD, OUD_WLS, OID, OSB, SOA, SOA_OSB, SOA_OSB_B2B, WCC, WCP, WCS WLS --useBuildx Use BuildKit for building the container image. --user Oracle support email ID. When supplying user, you must supply the password either as an environment variable using --passwordEnv, or as a file using --passwordFile, or interactively, on the command line with --password. --wdtArchive A WDT archive ZIP file or comma-separated list of files. --wdtDomainHome Path to the -domain_home for WDT. /u01/domains/base_domain --wdtDomainType WDT domain type. Supported values: WLS, JRF, RestrictedJRF WLS --wdtEncryptionKey Passphrase for WDT -use_encryption that will be requested on STDIN. --wdtEncryptionKeyEnv Passphrase for WDT -use_encryption that is provided as an environment variable. --wdtEncryptionKeyFile Passphrase for WDT -use_encryption that is provided as a file. --wdtHome The target folder in the image for the WDT install and models. /u01/wdt --wdtJavaOptions Java command-line options for WDT. --wdtModel A WDT model file or a comma-separated list of files. --wdtModelHome The target location in the image to copy WDT model, variable, and archive files. {wdtHome}/models --wdtModelOnly Install WDT and copy the models to the image, but do not create the domain. false --wdtOperation Create a new domain, or update an existing domain. Supported values: CREATE, UPDATE, DEPLOY CREATE --wdtRunRCU Instruct WDT to run RCU when creating the domain. --wdtStrictValidation Use strict validation for the WDT validation method. Only applies when using model only. false --wdtVariables A WDT variables file or comma-separated list of files. --wdtVersion WDT tool version to use. Additional information --additionalBuildCommands This is an advanced option that let\u0026rsquo;s you provide additional commands to the Docker build step.\nThe input for this parameter is a simple text file that contains one or more of the valid sections. Valid sections for update:\nSection Available Variables Build Stage Timing before-wdt-command DOMAIN_HOME Intermediate (WDT_BUILD) Before WDT is installed. after-wdt-command DOMAIN_HOME Intermediate (WDT_BUILD) After WDT domain creation/update is complete. final-build-commands JAVA_HOME ORACLE_HOME DOMAIN_HOME Final image After all Image Tool actions are complete, and just before the container image is finalized. NOTE: Changes made in intermediate stages may not be carried forward to the final image unless copied manually.\nThe Image Tool will copy the domain home and the WDT home directories to the final image.\nChanges fully contained within these directories do not need an additional COPY command in the final-build-commands section.\nEach section can contain one or more valid Dockerfile commands and would look like the following:\n[after-fmw-install] RUN rm /some/dir/unnecessary-file COPY --chown=oracle:oracle files/my_additional_file.txt /u01 [final-build-commands] LABEL owner=\u0026#34;middleware team\u0026#34; --additionalBuildFiles This option provides a way to supply additional files to the image build command. All provided files and directories are copied directly under the files subfolder of the build context.\nTo get those files into the image, additional build commands must be provided using the additionalBuildCommands options. Access to these files using a build command, such as COPY or ADD, should use the original filename with the folder prefix, files/. For example, if the original file was provided as --additionalBuildFiles /scratch/test1/convenience.sh, the Docker build command COPY provided in --additionalBuildCommands should look like COPY --chown=oracle:oracle files/convenience.sh /my/internal/image/location.\nBecause Image Tool uses multi-stage builds, it is important to place the build command (like COPY) in the appropriate section of the Dockerfile based on when the build needs access to the file. For example, if the file is needed in the final image and not for installation or domain creation steps, use the final-build-commands section so that the COPY command occurs in the final stage of the image build. Or, if the file needs to change the Oracle Home prior to domain creation, use the after-fmw-install or before-wdt-command sections.\n--latestPSU The latestPSU option will continue to be supported for the CREATE and REBASE option, but has been deprecated for use in the UPDATE option. Because of the number of patches and their size, using latestPSU as an update to an existing image can increase the size of the image significantly, and is not recommended.\n--recommendedPatches The recommendedPatches option will continue to be supported for the CREATE and REBASE option, but has been deprecated for use in the UPDATE option. Because of the number of patches and their size, using recommendedPatches as an update to an existing image can increase the size of the image significantly, and is not recommended.\n--target By default, the generated WLS domain in your image will use the best practices defined by Oracle WebLogic Server.\nThe target option allows you to toggle the defaults so that the generated domain is easier to use in the target environment. For example, the --target OpenShift option will change the file permissions in the domain directory so that the group permissions match the user permissions.\nTarget Default File Permissions Default File Ownership Default rwxr-x--- oracle:oracle OpenShift rwxrwx--- oracle:root Resource Template Files If provided, the file or files provided with --resourceTemplates will be overwritten. For known tokens, the placeholders will be replaced with values according to the following table.\nNote: Placeholders must follow the Mustache syntax, like {{imageName}} or {{{imageName}}}.\nToken Name Value Description domainHome The value provided to the Image Tool with --wdtDomainHome. domainHomeSourceType PersistentVolume (default), FromModel if --wdtModelOnly, or Image if the domain is created in the image with WDT. imageName The value provided to the Image Tool with --tag. modelHome The value provided to the Image Tool with --wdtModelHome. Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\nupdate --fromImage weblogic:14.1.4.0.0 --tag wls:141200-patched --patches 123456 --user acmeuser@mycompany.com --passwordEnv MYPWD Use it on the command line, as follows:\n$ imagetool @/path/to/build_args Usage scenarios Note: Use --passwordEnv or --passwordFile instead of --password.\nUpdate an image named sample:1.0 by applying the latest PSU and tag it as sample:1.1.\n$ imagetool update --fromImage sample:1.0 --tag sample:1.1 --latestPSU --user test@xyz.com --passwordEnv MYVAR Update an image named sample:1.0 with the selected patches applied and tag it as sample:1.1.\n$ imagetool update --fromImage sample:1.0 --tag sample:1.1 --user test@xyz.com --password hello --patches 12345678,87654321 Update an image named wls:14.1.4.0.0 by creating a new WebLogic domain using WDT and tag it as mydomain:1. The WDT installer is accessed from the cache with key wdt_1.1.1. The model and archive to use are located in a subfolder named wdt.\n$ imagetool update --fromImage wls:14.1.4.0.0 --tag mydomain:1 --wdtArchive ./wdt/my_domain.zip --wdtModel ./wdt/my_domain.yaml --wdtVersion 1.1.1 Use deployApps from WDT to deploy a new application, the WLS Metrics Exporter. The model and archive to use are located in a subfolder named wdt.\n$ imagetool update --tag mydomain:2 --fromImage mydomain:1 --wdtOperation deploy --wdtArchive ./wdt/exporter_archive.zip --wdtModel ./wdt/exporter_model.yaml --wdtVersion 1.1.1 "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "The Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually.\nBy default, the Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR.\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/dir\u0026#34; The Image Tool will try to prune intermediate images from the Docker multi-stage build after the build step. If you see dangling images after the build (images labeled as \u0026lt;none\u0026gt;), use the following command to remove them:\n$ docker rmi $(docker images --filter \u0026#34;dangling=true\u0026#34; -q --no-trunc) If you wish to keep the Docker context directory and/or the intermediate images, using the --skipcleanup flag will skip the delete steps. Some older versions of Docker do not support the prune command used by the Image Tool. As a temporary workaround, --skipcleanup can be used to skip the prune command until you are able to upgrade to a newer version of Docker.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/samples/create-image-wdt/",
	"title": "Create an image with a WLS domain using WDT",
	"tags": [],
	"description": "",
	"content": "The Image Tool lets you create a customized WebLogic domain in the image using the WebLogic Deploy Tool.\nSteps Create the image, as directed in the Quick Start guide.\nDownload the WebLogic Deploy Tool, and then add it to the cache store:\n$ imagetool cache addInstaller --type wdt --version 0.22 --path /home/acmeuser/cache/weblogic-deploy.zip Provide the command-line options for the WebLogic Deploy Tool: $ imagetool create --fromImage myosimg:latest --tag wls:12.2.1.3.0 --version 12.2.1.3.0 --wdtVersion 1.4.0 --wdtArchive /home/acmeuser/wdt/domain1.zip --wdtDomainHome /u01/domains/simple_domain The parameter mappings between the Image Tool and the WebLogic Deploy Tool are:\nImage Tool WebLogic Deploy Tool Default --wdtArchive -archive_file --wdtModel -model_file --wdtVariables -variable_file --wdtRunRCU -run_rcu false --wdtDomainHome -domain_home --wdtDomainType -domain_type WLS If you do not specify --wdtDomainHome, the domain will be created under /u01/domains/base_domain.\nNote: If you are creating a JRF domain and want WebLogic Deploy Tool to create the RCU schemas for you, you can specify the connection information in the model. See Specifying RCU information in the model.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/developer/",
	"title": "Developer Guide",
	"tags": [],
	"description": "",
	"content": "Developer Guide The Developer Guide provides information for developers who want to build the installer from source or contribute to the code.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/config/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "The default configuration is typically adequate for common use. But, the following environment variables are provided for non-typical use cases when the default values are insufficient.\nEnvironment variables WLSIMG_BLDDIR - During the build process, Image Tool creates a Docker context directory where it will create a Dockerfile and copy necessary files for the container image build. Setting this variable to another directory overrides the default of the user\u0026rsquo;s home directory as the parent folder of the Docker context directory. WLSIMG_BUILDER - As an alternative to the command-line argument --builder, this variable can be used to override the tool to process the Dockerfile (such asdocker or podman). The provided value should be the full path to the executable. For example, WLSIMG_BUILDER=\u0026quot;/usr/bin/docker\u0026quot;. WLSIMG_CACHEDIR - When Image Tool downloads patches, those patches are saved in the cache directory. Setting this variable to another directory overrides the default of the cache folder in the user\u0026rsquo;s home directory. WLSIMG_OS_PACKAGES - There are several packages and libraries that are required by the WebLogic Kubernetes Toolkit. The default packages included at build time are gzip tar unzip libaio libnsl jq findutils diffutils. The names for those libraries can be different depending on your preferred Linux distribution or OS version. The value that you provide in this environment variable will be used in place of the default package list. "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": "The Image Tool uses standard Java logging. To alter the default logging settings, you can modify the logging.properties file under the bin directory where you installed the Image Tool.\nTo enable debug logging In logging.properties, comment the existing handlers property and uncomment the second handlers line below the first line that you just commented. This should make the logging.properties file look something like this:\n#handlers=java.util.logging.ConsoleHandler $ handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler Then, change level to FINE or FINER.\n#com.oracle.weblogic.imagetool.level=INFO com.oracle.weblogic.imagetool.level=FINER Logging severity levels from highest to lowest:\nLevel Description SEVERE Only error messages are written to the log file. WARNING Warning messages and higher are written to the log file. INFO (Default) Informational messages and higher are written to the log file. FINE First level debug messages and higher are written to the log file. FINER Detailed debug messages and higher are written to the log file. FINEST In addition to FINER level debug messages, all HTTP responses are written to the log file. "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/inspect-image/",
	"title": "Inspect Image",
	"tags": [],
	"description": "The inspect command reports on the contents of a container image.",
	"content": "The inspect command reports on the contents of a container image providing version and location information for Java and WebLogic installations.\nUsage: imagetool inspect [OPTIONS] Parameter Definition Default --image, -i (Required) The image ID or image name to be inspected. --builder, -b Executable to inspect Docker images. Use the full path of the executable if not on your path. Defaults to docker, or, when set, to the value in environment variable WLSIMG_BUILDER. --format, -f The output format. Supported values: JSON JSON --patches. -p Include OPatch information in the output, including a list of WebLogic patches that are applied. --plarform Specify the platform for selecting the image (--image). host platform Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\ninspect --image wls:12.2.1.4.0 --patches Use the argument file on the command line, as follows:\n$ imagetool @/path/to/build_args Usage scenarios Inspect an image created with the create command where the latest PSU was applied.\n$ imagetool.sh inspect --image example:12214 --patches The output will be in JSON format and will be similar to:\n{ \u0026#34;oraclePatches\u0026#34; : [ { \u0026#34;patch\u0026#34; : \u0026#34;xxxxxxx\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;WLS PATCH SET UPDATE 12.2.1.4.xxxxxxx\u0026#34; } ], \u0026#34;javaHome\u0026#34; : \u0026#34;/u01/jdk\u0026#34;, \u0026#34;javaVersion\u0026#34; : \u0026#34;1.8.0_xxx\u0026#34;, \u0026#34;opatchVersion\u0026#34; : \u0026#34;13.9.4.2.5\u0026#34;, \u0026#34;oracleHome\u0026#34; : \u0026#34;/u01/oracle\u0026#34;, \u0026#34;oracleHomeGroup\u0026#34; : \u0026#34;oracle\u0026#34;, \u0026#34;oracleHomeUser\u0026#34; : \u0026#34;oracle\u0026#34;, \u0026#34;oracleInstalledProducts\u0026#34; : \u0026#34;WLS,COH,TOPLINK\u0026#34;, \u0026#34;packageManager\u0026#34; : \u0026#34;YUM\u0026#34;, \u0026#34;wlsVersion\u0026#34; : \u0026#34;12.2.1.4.0\u0026#34; } Inspect the same image without the optional --patches switch.\n$ imagetool.sh inspect --image example:12214 The output will be in JSON format and will be similar to:\n{ \u0026#34;javaHome\u0026#34; : \u0026#34;/u01/jdk\u0026#34;, \u0026#34;javaVersion\u0026#34; : \u0026#34;1.8.0_xxx\u0026#34;, \u0026#34;oracleHome\u0026#34; : \u0026#34;/u01/oracle\u0026#34;, \u0026#34;oracleHomeGroup\u0026#34; : \u0026#34;oracle\u0026#34;, \u0026#34;oracleHomeUser\u0026#34; : \u0026#34;oracle\u0026#34;, \u0026#34;oracleInstalledProducts\u0026#34; : \u0026#34;WLS,COH,TOPLINK\u0026#34;, \u0026#34;packageManager\u0026#34; : \u0026#34;YUM\u0026#34;, \u0026#34;wlsVersion\u0026#34; : \u0026#34;12.2.1.4.0\u0026#34; } "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/userguide/tools/cache/",
	"title": "Cache",
	"tags": [],
	"description": "The Image Tool maintains metadata on the local file system for patches and installers.  You can use the cache command to manipulate the local metadata.",
	"content": "The Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system.\nBy default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory.\nYou can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; You use the cache command to manipulate the local file cache. There are several subcommands for the cache feature.\nUsage: imagetool cache [OPTIONS] List and set cache options Option Description listItems List cache contents. addInstaller Add an installer to the cache. addPatch Add a patch to the cache. addEntry Add a cache entry. Use with caution. help Display help information for the specified command. Usage scenarios listItems: Display the contents of the cache. Displays key value pairs of the installers and patches.\nimagetool cache listItems Cache contents jdk_8u202=/home/acmeuser/Downloads/cache/server-jre-8u202-linux-x64.tar.gz wls_12.2.1.3.0=/home/acmeuser/Downloads/cache/fmw_12.2.1.3.0_wls_Disk1_1of1.zip 28186730_opatch=/home/acmeuser/cache/p28186730_139400_Generic.zip 29135930_12.2.1.3.190416=/home/acmeuser/cache/p29135930_12213190416_Generic.zip 29135930_12.2.1.3.0=/home/acmeuser/cache/p29135930_122130_Generic.zip cache.dir=/home/acemeuser/cache addInstaller: Add an installer to the cache, for example, JDK.\n$ imagetool cache addInstaller --type jdk --version 8u202 --path /path/to/local/jdk.tar.gz addPatch: Add a patch to the cache.\n$ imagetool cache addPatch --patchId 12345678_12.2.1.3.0 --path /path/to/patch.zip Note: When adding a patch to the cache store, the patchId should be in the following format: 99999999_9.9.9.9.99999 The first 8 digits is the patch ID, followed by an underscore, and then the release number to identify the patch between different patch versions.\nFor example, patch 29135930 has several different versions in Oracle Support, one for each release or PSU in which the bug is fixed.\nPatch Name Release 29135930 12.2.1.3.190416 29135930 12.2.1.3.0 29135930 12.2.1.3.18106 If you downloaded the release version 12.2.1.3.190416 of the patch, then you should use the argument --patchId 29135930_12.2.1.3.190416.\naddEntry: Consider this an expert mode where you can add key value pairs to the cache without any validation.\n$ imagetool cache addEntry --key xyz_123 --value /path/to/file deleteEntry: Delete an entry from the cache for a given key. Note: This command does not delete files from the disk.\n$ imagetool cache deleteEntry --key xyz_123 "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WebLogic Image Tool Oracle is finding ways for organizations using WebLogic Server to run important workloads, to move those workloads into the cloud, and to simplify and speed up the application deployment life cycle. By adopting industry standards, such as Docker and Kubernetes, WebLogic now runs in a cloud neutral infrastructure. To help simplify and automate the creation of container images for WebLogic Server, we are providing this open source WebLogic Image Tool (WIT).\nWIT lets you create a new Linux based image, with installations of a JDK and WebLogic Server, and optionally, configure a WebLogic domain with your applications, apply WebLogic Server patches, or update an existing image.\nWith the Image Tool you can:\nCreate a container image and install the requested Java and WebLogic software. And, you can create a WebLogic domain in the image, at the same time. Create a new container image using an existing WebLogic domain from an existing image. The Docker image can start from an existing image with a JDK and Oracle middleware installation, or can install the JDK and Oracle Home as part of moving the domain. Create a new container image by applying WebLogic patches to an existing image. In addition, if one did not exist previously, you can create a WebLogic domain, update an existing domain, or deploy an application. For detailed information, see Image Tool.\nCurrent production release WebLogic Image Tool version and release information can be found here.\nRecent changes and known issues See the Release Notes for issues and important information.\nAbout this documentation Use the Quick Start guide to create a Linux based WebLogic container image. The User Guide contains detailed usage information, including command options and usage scenarios. The Samples provide typical and informative use cases. The Developer Guide provides details for people who want to understand how WIT is built. Those who wish to contribute to the WebLogic Image Tool code will find useful information here. Related projects WebLogic Kubernetes Operator WebLogic Deploy Tooling WebLogic Kubernetes Toolkit UI WebLogic Monitoring Exporter WebLogic Logging Exporter WebLogic Remote Console Supported Fusion Middleware (FMW) products Use WebLogic Image Tool to create, update, and rebase the following FMW product images:\nOracle WebLogic Server (WLS) Fusion Middleware Infrastructure (FMW) Oracle Identity Manager (IDM) Oracle Managed File Transfer (MFT) Oracle Access Management (OAM) Oracle Data Integrator (ODI) Oracle HTTP Server (OHS) Oracle Internet Directory (OID) Oracle Identity Governance (OIG) Oracle Service Bus (OSB) Oracle Unified Directory (OUD) Oracle SOA Suite (SOA) Universal Content Management (UCM) Oracle WebCenter Content (WCC) Oracle WebCenter Portal (WCP) Oracle WebCenter Sites (WCS) "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/argument-file/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.\nFor example, create a file called build_args:\ncreate --type wls --version 12.2.1.3.0 --tag wls:122130 --user acmeuser@mycompany.com --httpProxyUrl http://mycompany-proxy:80 --httpsProxyUrl http://mycompany-proxy:80 --passwordEnv MYPWD Use it on the command line, as follows:\nimagetool @/path/to/build_args Copyright Copyright (c) 2019, 2021, Oracle and/or its affiliates.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/release-notes/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Release Notes The upcoming change to Oracle Support\u0026rsquo;s recommended patches list will require WebLogic Image Tool 1.9.11 in order to use the --recommendedPatches or --latestPSU flags. Due to changes in Oracle’s security, older versions of the Image Tool will no longer be able to download patches. Please use WebLogic Image Tool 1.9.10 or later. "
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-image-tool/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]