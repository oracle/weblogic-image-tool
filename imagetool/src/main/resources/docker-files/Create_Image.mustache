#
# Copyright (c) 2019, 2020, Oracle and/or its affiliates.
#
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
#
#
FROM {{baseImage}} as OS_UPDATE
LABEL com.oracle.weblogic.imagetool.buildid="{{buildId}}"
USER root

{{#useYum}}
RUN yum -y --downloaddir={{{tempDir}}} install gzip tar unzip libaio {{#osPackages}}{{{.}}} {{/osPackages}}\
 && yum -y --downloaddir={{{tempDir}}} clean all \
 && rm -rf /var/cache/yum/* \
 && rm -rf {{{tempDir}}}
{{/useYum}}
{{#useDnf}}
RUN dnf -y install gzip tar unzip libaio {{#osPackages}}{{{.}}} {{/osPackages}}\
 && dnf clean all
{{/useDnf}}
{{#useMicroDnf}}
RUN microdnf install gzip tar unzip libaio shadow-utils {{#osPackages}}{{{.}}} {{/osPackages}}\
 && microdnf clean all
{{/useMicroDnf}}
{{#useAptGet}}
RUN apt-get -y update \
 && apt-get -y upgrade \
 && apt-get -y install gzip tar unzip libaio {{#osPackages}}{{{.}}} {{/osPackages}}\
 && apt-get -y clean all
{{/useAptGet}}
{{#useApk}}
RUN apk update \
 && apk upgrade \
 && rm -rf /var/cache/apk/*
{{/useApk}}
{{#useZypper}}
RUN zypper -nq update \
 && zypper -nq clean \
 && rm -rf /var/cache/zypp/*
{{/useZypper}}

## Create user and group
RUN if [ -z "$(getent group {{groupid}})" ]; then hash groupadd &> /dev/null && groupadd {{groupid}} || exit -1 ; fi \
 && if [ -z "$(getent passwd {{userid}})" ]; then hash useradd &> /dev/null && useradd -g {{groupid}} {{userid}} || exit -1; fi \
 && mkdir /u01 \
 && chown {{userid}}:{{groupid}} /u01 \
 && chmod 775 /u01

{{#installJava}}
# Install Java
FROM OS_UPDATE as JDK_BUILD
LABEL com.oracle.weblogic.imagetool.buildid="{{buildId}}"

ENV JAVA_HOME={{{java_home}}}

COPY --chown={{userid}}:{{groupid}} {{java_pkg}} {{{tempDir}}}/

USER {{userid}}

{{#beforeJdkInstall}}
    {{{.}}}
{{/beforeJdkInstall}}

RUN tar xzf {{{tempDir}}}/{{java_pkg}} -C /u01 \
 && $(test -d /u01/jdk* && mv /u01/jdk* {{{java_home}}} || mv /u01/graal* {{{java_home}}}) \
 && rm -rf {{{tempDir}}} \
 && rm -f {{{java_home}}}/javafx-src.zip {{{java_home}}}/src.zip

{{#afterJdkInstall}}
    {{{.}}}
{{/afterJdkInstall}}
{{/installJava}}

# Install Middleware
FROM OS_UPDATE as WLS_BUILD
LABEL com.oracle.weblogic.imagetool.buildid="{{buildId}}"

ENV JAVA_HOME={{{java_home}}} \
    ORACLE_HOME={{{oracle_home}}} \
    OPATCH_NO_FUSER=true

RUN mkdir -p {{{oracle_home}}} \
{{#isCustomInventoryLoc}}
    && mkdir -p {{inv_loc}} \
    && chown {{userid}}:{{groupid}} {{inv_loc}} \
{{/isCustomInventoryLoc}}
 && mkdir -p {{orainv_dir}} \
 && chown {{userid}}:{{groupid}} {{orainv_dir}} \
 && chown {{userid}}:{{groupid}} {{{oracle_home}}}

{{#installJava}}COPY --from=JDK_BUILD --chown={{userid}}:{{groupid}} {{{java_home}}} {{{java_home}}}/
{{/installJava}}

{{#installPackages}}COPY --chown={{userid}}:{{groupid}} {{installerFilename}} {{responseFile.name}} {{{tempDir}}}/
{{/installPackages}}
COPY --chown={{userid}}:{{groupid}} oraInst.loc {{inv_loc}}/

{{#isOpatchPatchingEnabled}}
    COPY --chown={{userid}}:{{groupid}} {{{opatchFileName}}} {{{tempDir}}}/opatch/
{{/isOpatchPatchingEnabled}}

{{#isPatchingEnabled}}
    COPY --chown={{userid}}:{{groupid}} patches/* {{{tempDir}}}/patches/
{{/isPatchingEnabled}}

USER {{userid}}

{{#beforeFmwInstall}}
    {{{.}}}
{{/beforeFmwInstall}}

RUN echo "INSTALLING MIDDLEWARE" \
{{#installPackages}}
 && echo "INSTALLING {{type}}" \
 && {{#isZip}}unzip -q {{{tempDir}}}/{{installerFilename}} "*.jar" -d {{{tempDir}}} &&{{/isZip}} \
    {{{java_home}}}/bin/java -Xmx1024m -jar {{{tempDir}}}/{{jarName}} -silent ORACLE_HOME={{{oracle_home}}} \
    -responseFile {{{tempDir}}}/{{responseFile.name}} -invPtrLoc {{inv_loc}}/oraInst.loc -ignoreSysPrereqs -force -novalidation \
{{/installPackages}}
 && chmod -R g+r {{{oracle_home}}}

{{#isOpatchPatchingEnabled}}
RUN cd {{{tempDir}}}/opatch \
 && {{{java_home}}}/bin/jar -xf {{{tempDir}}}/opatch/{{{opatchFileName}}} \
 && {{{java_home}}}/bin/java -jar {{{tempDir}}}/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home={{{oracle_home}}}
{{/isOpatchPatchingEnabled}}

{{#isPatchingEnabled}}
    {{^strictPatchOrdering}}
        # Apply all patches provided at the same time
        RUN {{{oracle_home}}}/OPatch/opatch napply -silent -oh {{{oracle_home}}} -phBaseDir {{{tempDir}}}/patches \
        && test $? -eq 0 \
        && {{{oracle_home}}}/OPatch/opatch util cleanup -silent -oh {{{oracle_home}}} \
        || (cat {{{oracle_home}}}/cfgtoollogs/opatch/opatch*.log && exit 1)
    {{/strictPatchOrdering}}
    {{#strictPatchOrdering}}
        # Apply one patch at a time in the order they were specified
        {{#patches}}
            RUN {{{oracle_home}}}/OPatch/opatch apply -silent -oh {{{oracle_home}}} {{{tempDir}}}/patches/{{{.}}}
        {{/patches}}
        RUN {{{oracle_home}}}/OPatch/opatch util cleanup -silent -oh {{{oracle_home}}}
    {{/strictPatchOrdering}}
{{/isPatchingEnabled}}

{{#afterFmwInstall}}
    {{{.}}}
{{/afterFmwInstall}}

{{#isWdtEnabled}}
    FROM WLS_BUILD as WDT_BUILD
    ARG WDT_ENCRYPTION_KEY
    LABEL com.oracle.weblogic.imagetool.buildid="{{buildId}}"

    ENV WLSDEPLOY_PROPERTIES="{{{wlsdeploy_properties}}} -Djava.security.egd=file:/dev/./urandom" \
        LC_ALL=${DEFAULT_LOCALE:-en_US.UTF-8} \
        DOMAIN_HOME={{{domain_home}}}

    COPY --chown={{userid}}:{{groupid}} {{{wdtInstaller}}} {{{tempDir}}}/

    RUN mkdir -p {{{wdt_home}}} \
    && chown {{userid}}:{{groupid}} {{{wdt_home}}}

    USER {{userid}}

    RUN cd {{{wdt_home}}} \
    && mkdir -p {{{wdt_model_home}}} \
    && mkdir -p $(dirname {{{domain_home}}})

    {{#wdtModels}}
        COPY --chown={{userid}}:{{groupid}} {{{.}}} {{{wdt_model_home}}}/
    {{/wdtModels}}

    {{#wdtArchives}}
        COPY --chown={{userid}}:{{groupid}} {{{.}}} {{{wdt_model_home}}}/
    {{/wdtArchives}}

    {{#wdtVariables}}
        COPY --chown={{userid}}:{{groupid}} {{{.}}} {{{wdt_model_home}}}/
    {{/wdtVariables}}

    {{#beforeWdtCommand}}
        {{{.}}}
    {{/beforeWdtCommand}}

    RUN unzip -q {{{tempDir}}}/{{{wdtInstaller}}} -d {{{wdt_home}}}
    {{^modelOnly}}
        RUN cd {{{wdt_home}}}/weblogic-deploy/bin \
        && {{#isWdtUseEncryption}}echo $WDT_ENCRYPTION_KEY | {{/isWdtUseEncryption}} ./createDomain.sh \
        -oracle_home {{{oracle_home}}} \
        -domain_home {{{domain_home}}} \
        -domain_type {{domainType}} \
        {{#isWdtUseEncryption}}
            -use_encryption \
        {{/isWdtUseEncryption}}
        {{#runRcu}}
            -run_rcu \
        {{/runRcu}}
        {{{wdtVariableFileArgument}}} {{{wdtModelFileArgument}}} {{{wdtArchiveFileArgument}}} \
        && chmod -R g+w {{{domain_home}}}
    {{/modelOnly}}
    {{#isWdtValidateEnabled}}
        RUN cd {{{wdt_home}}}/weblogic-deploy/bin \
        && rm ./*.cmd \
        && chmod ug+x ./*.sh \
        && chmod -R g+w {{{wdt_home}}}/weblogic-deploy/lib \
        && ./validateModel.sh {{^strictValidation}}-method lax{{/strictValidation}} \
        -oracle_home {{{oracle_home}}} \
        -domain_type {{domainType}} \
        {{{wdtVariableFileArgument}}} {{{wdtModelFileArgument}}} {{{wdtArchiveFileArgument}}} \
        && rm -rf {{{wdt_home}}}/weblogic-deploy/logs \
        && find {{{wdt_home}}}/weblogic-deploy/lib/python -name "*.class" -exec rm  {} \;
    {{/isWdtValidateEnabled}}

    {{#afterWdtCommand}}
        {{{.}}}
    {{/afterWdtCommand}}

{{/isWdtEnabled}}

FROM OS_UPDATE as FINAL_BUILD

ARG ADMIN_NAME
ARG ADMIN_HOST
ARG ADMIN_PORT
ARG MANAGED_SERVER_PORT

ENV ORACLE_HOME={{{oracle_home}}} \
{{#installJava}}
    JAVA_HOME={{{java_home}}} \
{{/installJava}}
{{#isWdtEnabled}}
    ADMIN_NAME=${ADMIN_NAME:-admin-server} \
    ADMIN_HOST=${ADMIN_HOST:-wlsadmin} \
    ADMIN_PORT=${ADMIN_PORT:-7001} \
    MANAGED_SERVER_NAME=${MANAGED_SERVER_NAME:-} \
    MANAGED_SERVER_PORT=${MANAGED_SERVER_PORT:-8001} \
    DOMAIN_HOME={{{domain_home}}} \
{{/isWdtEnabled}}
    LC_ALL=${DEFAULT_LOCALE:-en_US.UTF-8} \
    PATH=${PATH}:{{{java_home}}}/bin:{{{oracle_home}}}/oracle_common/common/bin:{{{oracle_home}}}/wlserver/common/bin:{{{oracle_home}}}{{#isWdtEnabled}}:${{{domain_home}}}/bin{{/isWdtEnabled}}

LABEL com.oracle.weblogic.imagetool.buildid="{{buildId}}"

{{#installJava}}
    COPY --from=JDK_BUILD --chown={{userid}}:{{groupid}} {{{java_home}}} {{{java_home}}}/
{{/installJava}}

COPY --from=WLS_BUILD --chown={{userid}}:{{groupid}} {{{oracle_home}}} {{{oracle_home}}}/
{{#copyOraInst}}
    COPY --from=WLS_BUILD --chown={{userid}}:{{groupid}} {{inv_loc}}/oraInst.loc  {{inv_loc}}/oraInst.loc
{{/copyOraInst}}
{{#copyOraInventoryDir}}
    COPY --from=WLS_BUILD --chown={{userid}}:{{groupid}} {{orainv_dir}} {{orainv_dir}}/
{{/copyOraInventoryDir}}

{{#isWdtEnabled}}
    {{#modelOnly}}
        RUN DOMAIN_PARENT=$(dirname {{{domain_home}}}) \
        && mkdir -p $DOMAIN_PARENT \
        && chown {{userid}}:{{groupid}} $DOMAIN_PARENT \
        && chmod g+w $DOMAIN_PARENT \
        && mkdir -p {{{wdt_model_home}}} \
        && chmod g+w {{{wdt_model_home}}}
        COPY --from=WDT_BUILD --chown={{userid}}:{{groupid}} {{wdt_home}} {{wdt_home}}/
        {{#isWdtModelHomeOutsideWdtHome}}
            COPY --from=WDT_BUILD --chown={{userid}}:{{groupid}} {{wdt_model_home}} {{wdt_model_home}}/
        {{/isWdtModelHomeOutsideWdtHome}}
    {{/modelOnly}}
    {{^modelOnly}}
        COPY --from=WDT_BUILD --chown={{userid}}:{{groupid}} {{{domain_home}}} {{{domain_home}}}/
        RUN chmod g+w {{{domain_home}}}
    {{/modelOnly}}
{{/isWdtEnabled}}

{{#isWdtEnabled}}
    # Expose admin server, managed server port
    EXPOSE $ADMIN_PORT $MANAGED_SERVER_PORT
{{/isWdtEnabled}}

USER {{userid}}
WORKDIR {{{work_dir}}}

#ENTRYPOINT /bin/bash

{{#finalBuildCommands}}
    {{{.}}}
{{/finalBuildCommands}}
